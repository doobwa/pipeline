#!/usr/bin/env Rscript
METHOD <- "random_forest"

suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("rjson"))
suppressPackageStartupMessages(library("randomForest"))

option_list <- list(
  make_option("--id", help=""),
  make_option("--train", help=""),
  make_option("--test", help=""),
  make_option("--predictionsTrain", help=""),
  make_option("--predictionsTest", help=""),
  make_option("--log", help="")
  )
parser <- OptionParser(usage = "%prog [options]", option_list=option_list)
opts   <- parse_args(OptionParser(option_list=option_list))

config <- fromJSON(,"config.json")

args <- config$method[[METHOD]]$args[[as.numeric(opts$id) + 1]]  # id uses 0-based indexing

# Build data arguments. This could be modified to take a 
# formula instead (but the vignette says that might be really
# slow on large data sets).
x <- read.csv(fifo(opts$train))
xtest  <- read.csv(fifo(opts$test))
y <- x$response

if (is.null(args$regression)) {
    args$regression <- FALSE
}
if (!args$regression) {
    y <- factor(y)
}
x$response <- NULL
xtest$response <- NULL

if (is.null(args$ntree)) {
  args$ntree <- 500
}
if (is.null(args$mtry)) {
  args$mtry <- if (args$regression) ceiling(ncol(x) / 3) else ceiling(sqrt(ncol(x)))
}
if (is.null(args$replace)) {
  args$replace <- TRUE
}
if (is.null(args$classwt)) {
  args$classwt <- NULL
}
if (is.null(args$nodesize)) {
  args$nodesize <- if (args$regression) 5 else 1
}
if (is.null(args$do.trace)) {
  args$do.trace <- FALSE
}

res <- randomForest(x, y, xtest,
    ntree=args$ntree, 
    mtry=args$mtry,
    replace=args$replace,
    classwt=args$classwt,
    nodesize=args$nodesize,
    do.trace=args$do.trace
)

yhat <- res$test$predicted
out <- paste(yhat,collapse="\n")
out <- paste("prediction",out,sep="\n")
write(out,file=opts$predictionsTest)

yhat <- res$predicted
out <- paste(yhat,collapse="\n")
out <- paste("prediction",out,sep="\n")
write(out,file=opts$predictionsTrain)
