* Allow methods to be applied to portions of the training set
- Follow the example of pred_transform, and have a file in a project's scripts/ folder.
- Input: train pipe, test pipe, method, method.id, aux, predictionsTrain, predictionsTest, log
- idea: can use aux to fit the method to different parts of the data separately
- things it will place on queue: 
  - creates new pipes that only include portions of the data
  - fit methods to each portion and send to different predictions files
  - combine predictions files
- if a dataset mentions a mixer, then it is evaluated both with the mixer and without

* (GNU) parallel
- We may want to use the following options: 
    --eta and/or --progress: could be useful for setting up a dashboard.
    --joblog: also for dashboard.
    --load: simplifies the CPU usage checking task.
    --nonall: might speed up manual resource checking on multiple machines.
    --nice: to be nice to datalab :).
    -J: keep common configurations in profiles.
    --retries: adjust number of times to retry a failed job.
    --noswap: seems like a generally good idea, but may not "kick in" until 
      it's too late.
    --use-cpus-instead-of-cores: not sure if we need this, but it's 
      potentially relevant.

* Concurrent pipeline usage
- How do we both work on a competition at the same time? Do we each have 
  separate copies of all the data, or do we just link to a shared 
  directory?
    -- One option: have the (linked) shared directory defined in the config file.

* Ensemble selection
- Compute the best ensemble of methods using a held-out ensemble calibration dataset.
- Pipeline split will need to generate the held-out dataset(s).
- We need "methods" for computing the ensemble prediction (e.g. grid search, lasso, etc) 
  that take individual method predictions as input and try to predict the actual response 
  on the ensemble calibration data.
    - It may be useful to use "soft" predictions from other methods as input here. This 
      could be another use case for multiple columns in prediction files.

* Unit testing
- [ ] Have example folder include a sample project so that we can do
  integration testing on it.
- [ ] Need to be able to call pipeline from inside pipeline folder
* CLI for editing config.json
- Add "get" and "in" commands.
- Add some error checking and write stuff to stderr.
